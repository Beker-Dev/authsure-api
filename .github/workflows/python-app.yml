name: Python application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   services:
  #     database:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: postgres
  #       ports:
  #         - 5434:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: "3.10"
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install flake8 pytest
  #         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  # test:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   services:
  #     database:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: postgres
  #       ports:
  #         - 5434:5432
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v3
  #       with:
  #         python-version: "3.10"
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install flake8 pytest
  #         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #     - name: Lint with flake8
  #       run: |
  #         # stop the build if there are Python syntax errors or undefined names
  #         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  #     - name: Test with pytest
  #       run: |
  #         pytest -s -v
          
  deploy:
    # name: Building AuthsureApi Image
    runs-on: ubuntu-latest
    # needs: test
    
    steps:
    - name: Check code
      uses: actions/checkout@v2

    - name: Configuring AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        aws-session-token: ${{ secrets.AWS_TOKEN }}
      
    - name: Fazer login no Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region us-east-1   | docker login --username AWS --password-stdin ${{ secrets.AWS_URL }}

    - name: Criar arquivo .env
      run: |
        echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env
        echo "BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}" >> .env
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_SERVER=${{ secrets.POSTGRES_SERVER }}" >> .env
        echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
    
    - name: Construir, adicionar tag e enviar imagem para o Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.AWS_URL }}
        ECR_REPOSITORY: ${{ secrets.AWS_IMAGE }}
      run: |
        docker build -f ./docker/Dockerfile -t $ECR_REPOSITORY .
        docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
